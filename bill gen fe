Here's the updated code that includes **form validation** for the Admin Bill Management and Customer Payment components in your Angular application.

---

### **1. Updated Admin Bill Management Component**

**HTML: `admin-bill-management.component.html`**

```html
<div class="container my-5">
  <h2 class="text-center mb-4 text-primary">Admin Bill Management</h2>

  <form
    [formGroup]="billForm"
    (ngSubmit)="generateBill()"
    class="p-4 border rounded shadow-sm"
    novalidate
  >
    <!-- Customer ID -->
    <div class="mb-3">
      <label for="customerId" class="form-label">Customer ID</label>
      <input
        type="text"
        id="customerId"
        formControlName="customerId"
        class="form-control"
        placeholder="Enter Customer ID"
      />
      <div *ngIf="billForm.get('customerId')?.invalid && billForm.get('customerId')?.touched" class="text-danger">
        Customer ID is required.
      </div>
    </div>

    <!-- Bill Amount -->
    <div class="mb-3">
      <label for="amount" class="form-label">Bill Amount</label>
      <input
        type="number"
        id="amount"
        formControlName="amount"
        class="form-control"
        placeholder="Enter Amount"
      />
      <div *ngIf="billForm.get('amount')?.invalid && billForm.get('amount')?.touched" class="text-danger">
        Please enter a valid amount (greater than 0).
      </div>
    </div>

    <!-- Due Date -->
    <div class="mb-3">
      <label for="dueDate" class="form-label">Due Date</label>
      <input
        type="date"
        id="dueDate"
        formControlName="dueDate"
        class="form-control"
      />
      <div *ngIf="billForm.get('dueDate')?.invalid && billForm.get('dueDate')?.touched" class="text-danger">
        Due Date is required.
      </div>
    </div>

    <!-- Submit Button -->
    <button
      type="submit"
      class="btn btn-primary w-100"
      [disabled]="billForm.invalid"
    >
      Generate Bill
    </button>
  </form>
</div>
```

**TS: `admin-bill-management.component.ts`**

```typescript
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-admin-bill-management',
  templateUrl: './admin-bill-management.component.html',
  styleUrls: ['./admin-bill-management.component.scss'],
})
export class AdminBillManagementComponent {
  billForm: FormGroup;

  constructor(private fb: FormBuilder) {
    this.billForm = this.fb.group({
      customerId: ['', Validators.required],
      amount: [null, [Validators.required, Validators.min(1)]],
      dueDate: ['', Validators.required],
    });
  }

  generateBill() {
    if (this.billForm.valid) {
      const { customerId, amount, dueDate } = this.billForm.value;
      alert(`Bill generated for Customer ID: ${customerId}, Amount: ${amount}, Due Date: ${dueDate}`);
      this.billForm.reset();
    }
  }
}
```

---

### **2. Updated Customer Payment Component**

**HTML: `customer-payment.component.html`**

```html
<div class="container my-5">
  <h2 class="text-center mb-4 text-success">Customer Payment Portal</h2>

  <div class="card p-4 shadow-sm">
    <div class="card-header bg-success text-white">
      <h5>Pending Bills</h5>
    </div>
    <div class="card-body">
      <table class="table table-hover">
        <thead>
          <tr>
            <th>Bill ID</th>
            <th>Amount</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let bill of pendingBills">
            <td>{{ bill.id }}</td>
            <td>{{ bill.amount | currency }}</td>
            <td>{{ bill.dueDate | date: 'shortDate' }}</td>
            <td>
              <span class="badge bg-warning" *ngIf="bill.status === 'PENDING'">
                {{ bill.status }}
              </span>
              <span class="badge bg-success" *ngIf="bill.status === 'PAID'">
                {{ bill.status }}
              </span>
            </td>
            <td>
              <button
                class="btn btn-primary btn-sm"
                [disabled]="bill.status === 'PAID'"
                (click)="makePayment(bill.id)"
              >
                Pay Now
              </button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>
```

**TS: `customer-payment.component.ts`**

```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-customer-payment',
  templateUrl: './customer-payment.component.html',
  styleUrls: ['./customer-payment.component.scss'],
})
export class CustomerPaymentComponent {
  pendingBills = [
    { id: 1, amount: 120.5, dueDate: '2024-12-25', status: 'PENDING' },
    { id: 2, amount: 95.0, dueDate: '2024-12-30', status: 'PAID' },
  ];

  makePayment(billId: number) {
    const bill = this.pendingBills.find((b) => b.id === billId);
    if (bill) {
      bill.status = 'PAID';
      alert(`Payment successful for Bill ID: ${billId}`);
    }
  }
}
```

---

### **3. Styling Validation with SCSS**

**File: `styles.scss`**

```scss
// Add Bootstrap styling first
@import 'bootstrap/scss/bootstrap';

// Add custom form validation styles
.form-control.ng-touched.ng-invalid {
  border-color: #dc3545; // Bootstrap Danger color
  box-shadow: 0 0 5px rgba(220, 53, 69, 0.5);
}

.form-control.ng-touched.ng-valid {
  border-color: #28a745; // Bootstrap Success color
  box-shadow: 0 0 5px rgba(40, 167, 69, 0.5);
}

.text-danger {
  font-size: 0.875rem;
  margin-top: 0.25rem;
}
```

---

### **4. Key Features in the Updated Code**

1. **Reactive Forms with Validation**:
   - Validates each form field with Angular's reactive form features.
   - Real-time validation feedback using `ng-touched` and `ng-invalid`.

2. **Dynamic Styling**:
   - Input fields turn red on invalid input and green on valid input using SCSS styles.

3. **Disable Button on Invalid Form**:
   - The "Generate Bill" button is disabled until the form is valid.

4. **Reusable Table Design**:
   - Payment table dynamically updates based on customer bill data.

5. **Responsive Design**:
   - Bootstrap grid ensures the layout is mobile-friendly.

---

This code provides a polished UI with real-time validation and excellent styling to create a professional user experience. Let me know if you need more advanced features or integration with a backend!
















Below is the Angular front-end code that connects the front-end form with the Spring Boot backend API for bill generation. This includes a service to handle HTTP requests and updates to the form's submit logic.

---

### **1. Angular Service (`bill.service.ts`)**

Create a service to handle backend communication.

```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class BillService {
  private baseUrl = 'http://localhost:8080/api/bills'; // Backend API base URL

  constructor(private http: HttpClient) {}

  generateBill(bill: any): Observable<any> {
    return this.http.post(`${this.baseUrl}/generate`, bill);
  }

  getAllBills(): Observable<any[]> {
    return this.http.get<any[]>(this.baseUrl);
  }

  getBillById(id: number): Observable<any> {
    return this.http.get(`${this.baseUrl}/${id}`);
  }
}
```

---

### **2. Component Update (`bill-generation.component.ts`)**

Update the `BillGenerationComponent` to use the service for submitting form data.

```typescript
import { Component, OnInit } from '@angular/core';
import { BillService } from '../services/bill.service';

@Component({
  selector: 'app-bill-generation',
  templateUrl: './bill-generation.component.html',
  styleUrls: ['./bill-generation.component.css'],
})
export class BillGenerationComponent implements OnInit {
  customer: any = {
    customerId: '',
    billDate: '',
    dueDate: '',
    units: '',
    billamount: '',
  };

  constructor(private billService: BillService) {}

  ngOnInit(): void {}

  reset(form: any) {
    this.customer = {
      customerId: '',
      billDate: '',
      dueDate: '',
      units: '',
      billamount: '',
    };
    form.resetForm();
  }

  onSubmit(form: any) {
    if (
      this.customer.customerId &&
      this.customer.billDate &&
      this.customer.dueDate &&
      this.customer.units
    ) {
      this.billService.generateBill(this.customer).subscribe(
        (response) => {
          this.customer.billamount = response.billAmount;
          alert('Bill generated successfully!');
        },
        (error) => {
          console.error('Error generating bill:', error);
          alert('Failed to generate bill. Please try again later.');
        }
      );
    } else {
      alert('Please fill in all fields');
    }
  }

  change(units: any) {
    if (units) {
      this.customer.billamount = units * 8; // Precalculate amount on the frontend
    }
  }
}
```

---

### **3. Component HTML (`bill-generation.component.html`)**

The form remains the same as the one you provided, as it already aligns with the backend.

```html
<div class="container mt-5">
  <h2 class="text-left">Bill Generation</h2>
  <div class="card p-4">
    <form #Formadmin="ngForm" (ngSubmit)="onSubmit(Formadmin)">
      <div class="row mb-3">
        <div class="col-md-4">
          <label for="customerId" class="form-label">Customer ID</label>
          <input
            type="text"
            class="form-control"
            id="customerId"
            [(ngModel)]="customer.customerId"
            name="customerId"
            required
          />
        </div>

        <div class="col-md-4">
          <label for="billDate" class="form-label">Bill Date</label>
          <input
            type="date"
            class="form-control"
            id="billDate"
            [(ngModel)]="customer.billDate"
            name="billDate"
            required
          />
        </div>

        <div class="col-md-4">
          <label for="dueDate" class="form-label">Due Date</label>
          <input
            type="date"
            class="form-control"
            id="dueDate"
            [(ngModel)]="customer.dueDate"
            name="dueDate"
            required
          />
        </div>
      </div>

      <div class="row mb-3">
        <div class="col-md-4">
          <label for="units" class="form-label">Units</label>
          <input
            type="text"
            class="form-control"
            id="units"
            (change)="change(customer.units)"
            [(ngModel)]="customer.units"
            name="units"
            required
          />
        </div>

        <div class="col-md-4">
          <label for="billamount" class="form-label">Bill Amount</label>
          <input
            type="text"
            class="form-control"
            id="billamount"
            [(ngModel)]="customer.billamount"
            name="billamount"
            disabled
          />
        </div>
      </div>

      <div class="d-flex justify-content-between">
        <button type="submit" class="btn btn-primary">Generate Bill</button>
        <button type="button" class="btn btn-secondary" (click)="reset(Formadmin)">
          Reset
        </button>
      </div>
    </form>
  </div>
</div>
```

---

### **4. Angular Module Update (`app.module.ts`)**

Add `HttpClientModule` to the imports in `app.module.ts` and register the `BillService`.

```typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { AppComponent } from './app.component';
import { BillGenerationComponent } from './bill-generation/bill-generation.component';

@NgModule({
  declarations: [
    AppComponent,
    BillGenerationComponent,
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule,
  ],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
```

---

### Summary of Integration

1. The `BillService` handles API communication with the backend.
2. The `onSubmit` method in the component sends the form data to the backend using the service.
3. The backend calculates the bill amount and sends the result back to the front end.
4. The front end updates the `billamount` field and displays it to the user.

This setup ensures seamless communication between the Angular front end and the Spring Boot backend. Let me know if you need any additional help!



Here is a backend Spring Boot application that adheres to the MVC model to support the front-end Angular bill generation page. The backend application includes the necessary layers—controller, service, and DAO (Data Access Object)—as well as a database integration for managing customers and bill details.

### Backend Spring Boot Application Code

#### 1. **Entity Class**

```java
package com.ebs.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Bill {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String customerId;
    private String billDate;
    private String dueDate;
    private int units;
    private double billAmount;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public String getBillDate() {
        return billDate;
    }

    public void setBillDate(String billDate) {
        this.billDate = billDate;
    }

    public String getDueDate() {
        return dueDate;
    }

    public void setDueDate(String dueDate) {
        this.dueDate = dueDate;
    }

    public int getUnits() {
        return units;
    }

    public void setUnits(int units) {
        this.units = units;
    }

    public double getBillAmount() {
        return billAmount;
    }

    public void setBillAmount(double billAmount) {
        this.billAmount = billAmount;
    }
}
```

---

#### 2. **Repository Interface**

```java
package com.ebs.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import com.ebs.model.Bill;

public interface BillRepository extends JpaRepository<Bill, Long> {
}
```

---

#### 3. **Service Layer**

```java
package com.ebs.service;

import com.ebs.model.Bill;
import com.ebs.repository.BillRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BillService {

    @Autowired
    private BillRepository billRepository;

    public Bill saveBill(Bill bill) {
        return billRepository.save(bill);
    }

    public List<Bill> getAllBills() {
        return billRepository.findAll();
    }

    public Bill getBillById(Long id) {
        return billRepository.findById(id).orElse(null);
    }
}
```

---

#### 4. **Controller Layer**

```java
package com.ebs.controller;

import com.ebs.model.Bill;
import com.ebs.service.BillService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/bills")
@CrossOrigin(origins = "http://localhost:4200") // Adjust as per frontend origin
public class BillController {

    @Autowired
    private BillService billService;

    @PostMapping("/generate")
    public Bill generateBill(@RequestBody Bill bill) {
        double billAmount = bill.getUnits() * 8.0; // Calculate bill amount
        bill.setBillAmount(billAmount);
        return billService.saveBill(bill);
    }

    @GetMapping
    public List<Bill> getAllBills() {
        return billService.getAllBills();
    }

    @GetMapping("/{id}")
    public Bill getBillById(@PathVariable Long id) {
        return billService.getBillById(id);
    }
}
```

---

#### 5. **Application Properties**

```properties
# application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/ebs
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
```

---

#### 6. **Main Application**

```java
package com.ebs;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ElectricityBillingSystemApplication {

    public static void main(String[] args) {
        SpringApplication.run(ElectricityBillingSystemApplication.class, args);
    }
}
```

---

#### 7. **Database Setup**

Create the `ebs` database in MySQL and run the application. Spring Boot will automatically generate the `Bill` table based on the `Bill` entity.

```sql
CREATE DATABASE ebs;
```

---

### API Endpoints

1. **Generate Bill**  
   **POST** `/api/bills/generate`  
   **Body:**  
   ```json
   {
     "customerId": "C001",
     "billDate": "2024-12-19",
     "dueDate": "2024-12-30",
     "units": 150
   }
   ```
   **Response:**  
   ```json
   {
     "id": 1,
     "customerId": "C001",
     "billDate": "2024-12-19",
     "dueDate": "2024-12-30",
     "units": 150,
     "billAmount": 1200.0
   }
   ```

2. **Get All Bills**  
   **GET** `/api/bills`  
   **Response:**  
   ```json
   [
     {
       "id": 1,
       "customerId": "C001",
       "billDate": "2024-12-19",
       "dueDate": "2024-12-30",
       "units": 150,
       "billAmount": 1200.0
     }
   ]
   ```

3. **Get Bill By ID**  
   **GET** `/api/bills/{id}`

---

### Running the Application

1. Start the backend Spring Boot application.
2. Ensure the Angular front-end is running on `http://localhost:4200`.
3. Use the front-end form to submit data. It will invoke the `/api/bills/generate` endpoint to generate bills.

This architecture ensures a clean separation of concerns with a scalable design. Let me know if you need enhancements or further explanations!








To remove authorization for the endpoint, you can adjust the security configurations of your Spring Boot application. By default, Spring Security enforces authorization if it is enabled in your application. Here's a step-by-step guide to remove authorization from specific endpoints like `/connections/household`:

### 1. **Check Security Configuration**
   Locate your `SecurityConfig` class or equivalent Spring Security configuration. This is typically annotated with `@EnableWebSecurity`.

### 2. **Permit All Requests for the Specific Endpoint**
   You can explicitly allow unauthenticated access to the endpoint in your `HttpSecurity` configuration by using `.permitAll()`.

Here’s an example:

```java
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable() // Disable CSRF if necessary for testing (not recommended for production).
            .authorizeRequests()
            .antMatchers("/connections/household", "/connections/commercial").permitAll() // Allow unauthenticated access to these endpoints.
            .anyRequest().authenticated(); // Secure all other endpoints.
    }
}
```

### 3. **Disable Security Entirely (Optional for Development Only)**
   If you want to disable all security for your application during testing or development, you can configure the `HttpSecurity` to allow everything.

```java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .authorizeRequests().anyRequest().permitAll(); // Disable security for all endpoints.
    }
}
```

> **Note:** This is not recommended for production as it makes your application vulnerable.

---

### 4. **Verify Removal of Authorization**
After making the changes, restart your Spring Boot application and test the endpoint:

- Using tools like Postman, cURL, or a browser, make a request to `http://localhost:8888/connections/household`.
- Ensure that the server responds without requiring authentication.

---

### 5. **Optional: Log Unauthorized Access Attempts**
If you’re debugging authorization, consider logging unauthorized access attempts by configuring your logger in `application.properties` or `application.yml`:

```properties
logging.level.org.springframework.security=DEBUG
```

This can help diagnose issues if authorization is incorrectly applied.


