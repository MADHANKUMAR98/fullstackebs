-- Create the users_directory schema
CREATE USER users_directory IDENTIFIED BY password;
GRANT CONNECT, RESOURCE TO users_directory;

-- Switch to users_directory schema
ALTER SESSION SET CURRENT_SCHEMA = users_directory;

-- Create users table
CREATE TABLE users (
    user_id VARCHAR2(8) NOT NULL,
    first_name VARCHAR2(45),
    last_name VARCHAR2(45),
    aadhar_id VARCHAR2(12),
    password VARCHAR2(255) NOT NULL,
    phone_number VARCHAR2(10) NOT NULL,
    email VARCHAR2(255) NOT NULL UNIQUE,
    CONSTRAINT pk_users PRIMARY KEY (user_id),
    CONSTRAINT uc_user UNIQUE (aadhar_id, email)
);

-- Create household_connections table
CREATE TABLE household_connections (
    connection_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id VARCHAR2(8) NOT NULL,
    connection_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    address VARCHAR2(255) NOT NULL,
    load_required VARCHAR2(45) NOT NULL,
    phase VARCHAR2(45) NOT NULL,
    applicant_photo BLOB NOT NULL,
    property_tax_report BLOB NOT NULL,
    applicant_reference_number VARCHAR2(50) NOT NULL UNIQUE,
    payment_status VARCHAR2(8) DEFAULT 'not_paid' CHECK (payment_status IN ('paid', 'not_paid')),
    CONSTRAINT pk_household_connections PRIMARY KEY (connection_id),
    CONSTRAINT fk_household_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

-- Create commercial_connections table
CREATE TABLE commercial_connections (
    connection_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id VARCHAR2(8) NOT NULL,
    connection_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    business_name VARCHAR2(100) NOT NULL,
    business_type VARCHAR2(100) NOT NULL,
    address VARCHAR2(255) NOT NULL,
    sq_meter NUMBER(10, 2) NOT NULL,
    load_required VARCHAR2(45) NOT NULL,
    phase VARCHAR2(45) NOT NULL,
    applicant_photo BLOB NOT NULL,
    property_tax_report BLOB NOT NULL,
    ownership_proof BLOB NOT NULL,
    applicant_reference_number VARCHAR2(50) NOT NULL UNIQUE,
    payment_status VARCHAR2(8) DEFAULT 'not_paid' CHECK (payment_status IN ('paid', 'not_paid')),
    CONSTRAINT pk_commercial_connections PRIMARY KEY (connection_id),
    CONSTRAINT fk_commercial_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

-- Create meter_readings table
CREATE TABLE meter_readings (
    reading_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id VARCHAR2(8) NOT NULL,
    connection_type VARCHAR2(12) CHECK (connection_type IN ('household', 'commercial')),
    reading_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    units_consumed NUMBER NOT NULL,
    payment_status VARCHAR2(8) DEFAULT 'not_paid' CHECK (payment_status IN ('paid', 'not_paid')),
    CONSTRAINT pk_meter_readings PRIMARY KEY (reading_id),
    CONSTRAINT fk_reading_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

-- Create bills table
CREATE TABLE bills (
    bill_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    reading_id NUMBER NOT NULL,
    bill_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    amount NUMBER(10, 2) NOT NULL,
    CONSTRAINT pk_bills PRIMARY KEY (bill_id),
    CONSTRAINT fk_bills_reading FOREIGN KEY (reading_id) REFERENCES meter_readings (reading_id) ON DELETE CASCADE
);

-- Create payments table
CREATE TABLE payments (
    payment_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    bill_id NUMBER NOT NULL,
    receipt_no VARCHAR2(50) NOT NULL,
    amount_debited NUMBER(10, 2) NOT NULL,
    transaction_no VARCHAR2(50) NOT NULL,
    receipt_date TIMESTAMP NOT NULL,
    bank_name VARCHAR2(50),
    card_type VARCHAR2(50),
    service_no VARCHAR2(50),
    CONSTRAINT pk_payments PRIMARY KEY (payment_id),
    CONSTRAINT fk_payments_bill FOREIGN KEY (bill_id) REFERENCES bills (bill_id) ON DELETE CASCADE
);

-- Trigger for automatic bill calculation
CREATE OR REPLACE TRIGGER trg_meter_reading_insert
AFTER INSERT ON meter_readings
FOR EACH ROW
DECLARE
    total_amount NUMBER(10, 2);
BEGIN
    IF :NEW.connection_type = 'household' THEN
        IF :NEW.units_consumed <= 50 THEN
            total_amount := 0;
        ELSIF :NEW.units_consumed <= 100 THEN
            total_amount := (:NEW.units_consumed - 50) * 2;
        ELSIF :NEW.units_consumed <= 300 THEN
            total_amount := 50 * 2 + (:NEW.units_consumed - 100) * 4;
        ELSE
            total_amount := 50 * 2 + 200 * 4 + (:NEW.units_consumed - 300) * 6;
        END IF;
    ELSIF :NEW.connection_type = 'commercial' THEN
        IF :NEW.units_consumed <= 20 THEN
            total_amount := 0;
        ELSIF :NEW.units_consumed <= 100 THEN
            total_amount := (:NEW.units_consumed - 20) * 4;
        ELSIF :NEW.units_consumed <= 200 THEN
            total_amount := 80 * 4 + (:NEW.units_consumed - 100) * 6;
        ELSE
            total_amount := 80 * 4 + 100 * 6 + (:NEW.units_consumed - 200) * 8;
        END IF;
    END IF;

    INSERT INTO bills (reading_id, amount) VALUES (:NEW.reading_id, total_amount);
END;
/

-- Triggers for household and commercial connections
CREATE OR REPLACE TRIGGER trg_household_connection_insert
AFTER INSERT ON household_connections
FOR EACH ROW
BEGIN
    FOR i IN 1..12 LOOP
        INSERT INTO meter_readings (user_id, connection_type, reading_date, units_consumed, payment_status)
        VALUES (:NEW.user_id, 'household', ADD_MONTHS(DATE '2023-01-01', i - 1), 100 + i * 10, 'not_paid');
    END LOOP;
END;
/

CREATE OR REPLACE TRIGGER trg_commercial_connection_insert
AFTER INSERT ON commercial_connections
FOR EACH ROW
BEGIN
    FOR i IN 1..12 LOOP
        INSERT INTO meter_readings (user_id, connection_type, reading_date, units_consumed, payment_status)
        VALUES (:NEW.user_id, 'commercial', ADD_MONTHS(DATE '2023-01-01', i - 1), 300 + i * 10, 'not_paid');
    END LOOP;
END;
/
